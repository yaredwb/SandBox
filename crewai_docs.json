{
    "https://docs.crewai.com/introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/examples/example": {
        "Examples": [],
        "CrewAI Examples": [],
        "Marketing Strategy": [],
        "Surprise Trip": [],
        "Match Profile to Positions": [],
        "Create Job Posting": [],
        "Game Generator": [],
        "Find Job Candidates": []
    },
    "https://docs.crewai.com/installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Installation": [],
        "​Create a new CrewAI project": [
            "The next step is to create a new CrewAI project.\nWe recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks."
        ],
        "​Next steps": [
            "Now that you have installedcrewaiandcrewai-tools, you’re ready to spin up your first crew!"
        ]
    },
    "https://docs.crewai.com/quickstart": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/concepts/agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/tasks": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/crews": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/flows": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/llms": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/processes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/training": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Training": [],
        "​Introduction": [
            "The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).\nBy running the commandcrewai train -n <n_iterations>, you can specify the number of iterations for the training process.",
            "During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.\nThis helps the agents improve their understanding, decision-making, and problem-solving abilities."
        ],
        "​Training Your Crew Using the CLI": [
            "To use the training feature, follow these steps:"
        ],
        "​Training Your Crew Programmatically": [
            "To train your crew programmatically, use the following steps:"
        ],
        "​Key Points to Note": [
            "It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.",
            "Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.",
            "Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.",
            "Happy training with CrewAI! 🚀"
        ]
    },
    "https://docs.crewai.com/concepts/memory": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/planning": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Planning": [],
        "​Introduction": [
            "The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,\nall Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description."
        ],
        "​Using the Planning Feature": [
            "Getting started with the planning feature is very easy, the only step required is to addplanning=Trueto your Crew:",
            "From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration."
        ],
        "​Planning LLM": [
            "Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.",
            "When running the base case example, you will see something like the output below, which represents the output of theAgentPlannerresponsible for creating the step-by-step logic to add to the Agents’ tasks."
        ]
    },
    "https://docs.crewai.com/concepts/testing": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Testing": [],
        "​Introduction": [
            "Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities."
        ],
        "​Using the Testing Feature": [
            "We added the CLI commandcrewai testto make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters aren_iterationsandmodel, which are optional and default to 2 andgpt-4o-minirespectively. For now, the only provider available is OpenAI.",
            "If you want to run more iterations or use a different model, you can specify the parameters like this:",
            "or using the short forms:",
            "When you run thecrewai testcommand, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.",
            "A table of scores at the end will show the performance of the crew in terms of the following metrics:",
            "The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole."
        ]
    },
    "https://docs.crewai.com/concepts/cli": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/langchain-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Using LangChain Tools": [],
        "​Using LangChain Tools": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms,\nand the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/llamaindex-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Using LlamaIndex Tools": [],
        "​Using LlamaIndex Tools": [
            "Here are the available built-in tools offered by LlamaIndex."
        ],
        "​Steps to Get Started": [
            "To effectively use the LlamaIndexTool, follow these steps:"
        ]
    },
    "https://docs.crewai.com/how-to/create-custom-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Custom Tools": [],
        "​Creating and Utilizing Tools in CrewAI": [
            "This guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,\nenabling agents to perform a wide range of actions."
        ],
        "​SubclassingBaseTool": [
            "To create a personalized tool, inherit fromBaseTooland define the necessary attributes, including theargs_schemafor input validation, and the_runmethod."
        ],
        "​Using thetoolDecorator": [
            "Alternatively, you can use the tool decorator@tool. This approach allows you to define the tool’s attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to your needs."
        ],
        "​Defining a Cache Function for the Tool": [
            "To optimize tool performance with caching, define custom caching strategies using thecache_functionattribute.",
            "By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,\nyou can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/coding-agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Coding Agents": [],
        "​Introduction": [
            "CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions."
        ],
        "​Enabling Code Execution": [
            "To enable code execution for an agent, set theallow_code_executionparameter toTruewhen creating the agent.",
            "Here’s an example:"
        ],
        "​Important Considerations": [],
        "​Code Execution Process": [
            "When an agent with code execution enabled encounters a task requiring programming:"
        ],
        "​Example Usage": [
            "Here’s a detailed example of creating an agent with code execution capabilities and using it in a task:",
            "In this example, thecoding_agentcan write and execute Python code to perform data analysis tasks."
        ]
    },
    "https://docs.crewai.com/how-to/force-tool-output-as-result": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Force Tool Output as Result": [],
        "​Introduction": [
            "In CrewAI, you can force the output of a tool as the result of an agent’s task.\nThis feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution."
        ],
        "​Forcing Tool Output as Result": [
            "To force the tool output as the result of an agent’s task, you need to set theresult_as_answerparameter toTruewhen adding a tool to the agent.\nThis parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.",
            "Here’s an example of how to force the tool output as the result of an agent’s task:"
        ],
        "​Workflow in Action": []
    },
    "https://docs.crewai.com/how-to/human-input-on-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Human Input on Execution": [],
        "​Human input in agent execution": [
            "Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary.\nThis feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively."
        ],
        "​Using human input with CrewAI": [
            "To integrate human input into agent execution, set thehuman_inputflag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer.\nThis input can provide extra context, clarify ambiguities, or validate the agent’s output."
        ],
        "​Example:": []
    },
    "https://docs.crewai.com/how-to/kickoff-async": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-for-each": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew for Each": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list.\nThis feature is particularly useful when you need to perform the same set of tasks for multiple items."
        ],
        "​Kicking Off a Crew for Each Item": [
            "To kickoff a crew for each item in a list, use thekickoff_for_each()method.\nThis method executes the crew for each item in the list, allowing you to process multiple items efficiently.",
            "Here’s an example of how to kickoff a crew for each item in a list:"
        ]
    },
    "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Replay Tasks from Latest Crew Kickoff": [],
        "​Introduction": [
            "CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you’ve finished a kickoff and may want to retry certain tasks or don’t need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.",
            "Here’s an example of how to replay from a task:"
        ],
        "​Replaying from Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:"
        ],
        "​Replaying from a Task Programmatically": [
            "To replay from a task programmatically, use the following steps:"
        ],
        "​Conclusion": [
            "With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.\nEnsure you follow the commands and steps precisely to make the most of these features."
        ]
    },
    "https://docs.crewai.com/how-to/conditional-tasks": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Conditional Tasks": [],
        "​Introduction": [
            "Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks.\nThis powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes."
        ],
        "​Example Usage": []
    },
    "https://docs.crewai.com/how-to/agentops-observability": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/langtrace-observability": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with Langtrace": [],
        "​Langtrace Overview": [
            "Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases.\nWhile not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents.\nThis integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.",
            ""
        ],
        "​Setup Instructions": [],
        "​Features and Their Application to CrewAI": []
    },
    "https://docs.crewai.com/tools/browserbaseloadtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Browserbase Web Loader": [],
        "​BrowserbaseLoadTool": [],
        "​Description": [
            "Browserbaseis a developer platform to reliably run, manage, and monitor headless browsers.",
            "Power your AI data retrievals with:"
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theBrowserbaseLoadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codeinterpretertool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Interpreter": [],
        "​CodeInterpreterTool": [],
        "​Description": [
            "This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.",
            "This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install thecrewai_toolspackage"
        ],
        "​Example": [
            "Remember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.",
            "We also provide a simple way to use it directly from the Agent."
        ]
    },
    "https://docs.crewai.com/tools/composiotool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Composio Tool": [],
        "​ComposioTool": [],
        "​Description": [
            "This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:",
            "after the installation is complete, either runcomposio loginor export your composio API key asCOMPOSIO_API_KEY."
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a github action:",
            "If you don’t know what action you want to use, usefrom_appandtagsfilter to get relevant actions",
            "or useuse_caseto search relevant actions"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/dalletool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DALL-E Tool": [],
        "​DallETool": [],
        "​Description": [
            "This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.\nThis tool allows the Agent to generate images based on the text input provided by the user."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [
            "Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.",
            "If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to theDallEToolclass. For example:",
            "The parameters are based on theclient.images.generatemethod from the OpenAI API. For more information on the parameters,\nplease refer to theOpenAI API documentation."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directoryreadtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory Read": [],
        "​DirectoryReadTool": [],
        "​Description": [
            "The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories."
        ],
        "​Installation": [
            "To utilize the DirectoryReadTool in your project, install thecrewai_toolspackage. If this package is not yet part of your environment, you can install it using pip with the command below:",
            "This command installs the latest version of thecrewai_toolspackage, granting access to the DirectoryReadTool among other utilities."
        ],
        "​Example": [
            "Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDirectoryReadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/filereadtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Read": [],
        "​FileReadTool": [],
        "​Description": [
            "The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as.txt,.csv,.json, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use."
        ],
        "​Installation": [
            "To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:"
        ],
        "​Usage Example": [
            "To get started with the FileReadTool:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/filewritetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Crawl Website": [],
        "​FirecrawlCrawlWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlscrapewebsitetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Scrape Website": [],
        "​FirecrawlScrapeWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Search": [],
        "​FirecrawlSearchTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/githubsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/scrapewebsitetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Scrape Website": [],
        "​ScrapeWebsiteTool": [],
        "​Description": [
            "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/seleniumscrapingtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Selenium Scraper": [],
        "​SeleniumScrapingTool": [],
        "​Description": [
            "The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL."
        ],
        "​Installation": [
            "To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:"
        ],
        "​Usage Examples": [
            "Below are some scenarios where the SeleniumScrapingTool can be utilized:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize the SeleniumScrapingTool’s scraping process:"
        ]
    },
    "https://docs.crewai.com/tools/spidertool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Spider Scraper": [],
        "​SpiderTool": [],
        "​Description": [
            "Spideris thefastestopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI."
        ],
        "​Installation": [
            "To use theSpiderToolyou need to download theSpider SDKand thecrewai[tools]SDK too:"
        ],
        "​Example": [
            "This example shows you how you can use theSpiderToolto enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there."
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/txtsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/visiontool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Vision Tool": [],
        "​VisionTool": [],
        "​Description": [
            "This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the VisionTool, the OpenAI API key should be set in the environment variableOPENAI_API_KEY."
        ],
        "​Arguments": [
            "The VisionTool requires the following arguments:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/telemetry": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Telemetry": [
            "CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.\nOur focus is on improving and developing the features, integrations, and tools most utilized by our users.",
            "It’s pivotal to understand that by default,NO personal data is collectedconcerning prompts, task descriptions, agents’ backstories or goals,\nusage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.\nWhen theshare_crewfeature is enabled, detailed data including task descriptions, agents’ backstories or goals, and other specific attributes are collected\nto provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before enablingshare_crew.\nUsers can disable telemetry by setting the environment variableOTEL_SDK_DISABLEDtotrue."
        ],
        "​Data Explanation:": [],
        "​Opt-In Further Telemetry Sharing": [
            "Users can choose to share their complete telemetry data by enabling theshare_crewattribute toTruein their crew configurations.\nEnablingshare_crewresults in the collection of detailed crew and task execution data, includinggoal,backstory,context, andoutputof tasks.\nThis enables a deeper insight into usage patterns."
        ]
    },
    "https://docs.crewai.com/introduction#what-is-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/introduction#why-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/introduction#get-started-with-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/introduction#next-step": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/#what-is-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/#why-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/#get-started-with-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/#next-step": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Introduction": [],
        "​What is CrewAI?": [
            "CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.",
            "By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks."
        ],
        "​Why CrewAI?": [],
        "​Get Started with CrewAI": [],
        "Quickstart": [],
        "Join the Community": [],
        "​Next Step": []
    },
    "https://docs.crewai.com/installation#create-a-new-crewai-project": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Installation": [],
        "​Create a new CrewAI project": [
            "The next step is to create a new CrewAI project.\nWe recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks."
        ],
        "​Next steps": [
            "Now that you have installedcrewaiandcrewai-tools, you’re ready to spin up your first crew!"
        ]
    },
    "https://docs.crewai.com/installation#next-steps": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Installation": [],
        "​Create a new CrewAI project": [
            "The next step is to create a new CrewAI project.\nWe recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks."
        ],
        "​Next steps": [
            "Now that you have installedcrewaiandcrewai-tools, you’re ready to spin up your first crew!"
        ]
    },
    "https://docs.crewai.com/quickstart#build-your-first-crewai-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/quickstart#note-on-consistency-in-naming": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/quickstart#example-references": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/quickstart#annotations-include": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/concepts": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/quickstart#replay-tasks-from-latest-crew-kickoff": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/quickstart#reset-crew-memory": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/quickstart#deploying-your-project": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Quickstart": [],
        "​Build your first CrewAI Agent": [
            "Let’s create a simple crew that will help usresearchandreporton thelatest AI developmentsfor a given topic or subject.",
            "Before we proceed, make sure you havecrewaiandcrewai-toolsinstalled.\nIf you haven’t installed them yet, you can do so by following theinstallation guide.",
            "Follow the steps below to get crewing! 🚣‍♂️"
        ],
        "​Note on Consistency in Naming": [
            "The names you use in your YAML files (agents.yamlandtasks.yaml) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks fromtasks.yamlfile.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly."
        ],
        "​Example References": [
            "Use the annotations to properly reference the agent and task in thecrew.pyfile."
        ],
        "​Annotations include:": [],
        "​Replay Tasks from Latest Crew Kickoff": [
            "CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.",
            "Replace<task_id>with the ID of the task you want to replay."
        ],
        "​Reset Crew Memory": [
            "If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:",
            "This will clear the crew’s memory, allowing for a fresh start."
        ],
        "​Deploying Your Project": [
            "The easiest way to deploy your crew is throughCrewAI Enterprise, where you can deploy your crew in a few clicks."
        ]
    },
    "https://docs.crewai.com/concepts/agents#what-is-an-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/agents#agent-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/agents#creating-an-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/agents#setting-prompt-templates": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/agents#bring-your-third-party-agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/agents#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#overview-of-a-task": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#task-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#creating-a-task": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#task-output": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#task-output-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#task-methods-and-properties": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#accessing-task-outputs": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#integrating-tools-with-tasks": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#creating-a-task-with-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#referring-to-other-tasks": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#asynchronous-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#callback-mechanism": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#accessing-a-specific-task-output": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#tool-override-mechanism": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#error-handling-and-validation-mechanisms": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#creating-directories-when-saving-files": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/tasks#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Tasks": [],
        "​Overview of a Task": [
            "In the CrewAI framework, aTaskis a specific assignment completed by anAgent.",
            "They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
            "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency."
        ],
        "​Task Attributes": [],
        "​Creating a Task": [
            "Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:"
        ],
        "​Task Output": [
            "The output of a task in CrewAI framework is encapsulated within theTaskOutputclass. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
            "By default, theTaskOutputwill only include therawoutput. ATaskOutputwill only include thepydanticorjson_dictoutput if the originalTaskobject was configured withoutput_pydanticoroutput_json, respectively."
        ],
        "​Task Output Attributes": [],
        "​Task Methods and Properties": [],
        "​Accessing Task Outputs": [
            "Once a task has been executed, its output can be accessed through theoutputattribute of theTaskobject. TheTaskOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Integrating Tools with Tasks": [
            "Leverage tools from theCrewAI ToolkitandLangChain Toolsfor enhanced task performance and agent interaction."
        ],
        "​Creating a Task with Tools": [
            "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution."
        ],
        "​Referring to Other Tasks": [
            "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
            "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through thecontextattribute of the task:"
        ],
        "​Asynchronous Execution": [
            "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
            "You can then use thecontextattribute to define in a future task that it should wait for the output of the asynchronous task to be completed."
        ],
        "​Callback Mechanism": [
            "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome."
        ],
        "​Accessing a Specific Task Output": [
            "Once a crew finishes running, you can access the output of a specific task by using theoutputattribute of the task object:"
        ],
        "​Tool Override Mechanism": [
            "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility."
        ],
        "​Error Handling and Validation Mechanisms": [
            "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
            "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework."
        ],
        "​Creating Directories when Saving Files": [
            "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured."
        ],
        "​Conclusion": [
            "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended."
        ]
    },
    "https://docs.crewai.com/concepts/crews#what-is-a-crew": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#crew-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#crew-output": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#crew-output-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#crew-output-methods-and-properties": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#accessing-crew-outputs": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#memory-utilization": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#cache-utilization": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#crew-usage-metrics": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#crew-execution-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#kicking-off-a-crew": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#different-ways-to-kick-off-a-crew": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#replaying-from-a-specific-task": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/crews#replaying-from-a-specific-task-using-the-cli": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Crews": [],
        "​What is a Crew?": [
            "A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
        ],
        "​Crew Attributes": [],
        "​Crew Output": [
            "The output of a crew in the CrewAI framework is encapsulated within theCrewOutputclass.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nTheCrewOutputincludes the results from the final task output, token usage, and individual task outputs."
        ],
        "​Crew Output Attributes": [],
        "​Crew Output Methods and Properties": [],
        "​Accessing Crew Outputs": [
            "Once a crew has been executed, its output can be accessed through theoutputattribute of theCrewobject. TheCrewOutputclass provides various ways to interact with and present this output."
        ],
        "​Example": [],
        "​Memory Utilization": [
            "Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies."
        ],
        "​Cache Utilization": [
            "Caches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks."
        ],
        "​Crew Usage Metrics": [
            "After the crew execution, you can access theusage_metricsattribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement."
        ],
        "​Crew Execution Process": [],
        "​Kicking Off a Crew": [
            "Once your crew is assembled, initiate the workflow with thekickoff()method. This starts the execution process according to the defined process flow."
        ],
        "​Different Ways to Kick Off a Crew": [
            "Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process:kickoff(),kickoff_for_each(),kickoff_async(), andkickoff_for_each_async().",
            "These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs."
        ],
        "​Replaying from a Specific Task": [
            "You can now replay from a specific task using our CLI commandreplay.",
            "The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the commandcrewai replay -t <task_id>, you can specify thetask_idfor the replay process.",
            "Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from."
        ],
        "​Replaying from a Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:",
            "To view the latest kickoff task IDs, use:",
            "Then, to replay from a specific task, use:",
            "These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks."
        ]
    },
    "https://docs.crewai.com/concepts/flows#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#getting-started": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#passing-inputs-to-flows": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#structured-state-management": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#unstructured-state-management": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#example-flow": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#start": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#listen": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#flow-output": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#retrieving-the-final-output": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#accessing-and-updating-state": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#flow-state-management": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#unstructured-state-management-2": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#structured-state-management-2": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#choosing-between-unstructured-and-structured-state-management": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#flow-control": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#conditional-logic-or": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#conditional-logic-and": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#router": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#adding-crews-to-flows": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#folder-structure": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#building-your-crews": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#connecting-crews-in-main-py": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#running-the-flow": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#adding-additional-crews-using-the-cli": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#folder-structure-2": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#plot-flows": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#what-are-plots": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#how-to-generate-a-plot": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#option-1-using-the-plot-method": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#option-2-using-the-command-line": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#understanding-the-plot": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#advanced": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#1-self-evaluation-loop": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#overview": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#importance": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#main-code-highlights": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#code-highlights": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/flows#next-steps": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Flows": [],
        "​Introduction": [
            "CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.",
            "Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities."
        ],
        "​Getting Started": [
            "Let’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task."
        ],
        "​Passing Inputs to Flows": [
            "Flows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management."
        ],
        "​Structured State Management": [
            "Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’sBaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.",
            "Key Points:"
        ],
        "​Unstructured State Management": [
            "In unstructured state management, all state is stored in thestateattribute of theFlowclass.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.",
            "Key Points:"
        ],
        "​Example Flow": [
            "In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks:generate_cityandgenerate_fun_fact. Thegenerate_citytask is the starting point of the Flow, and thegenerate_fun_facttask listens for the output of thegenerate_citytask.",
            "When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.",
            "Note:Ensure you have set up your.envfile to store yourOPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API."
        ],
        "​@start()": [
            "The@start()decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with@start()are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started."
        ],
        "​@listen()": [
            "The@listen()decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with@listen()will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument."
        ],
        "​Usage": [
            "The@listen()decorator can be used in several ways:"
        ],
        "​Flow Output": [
            "Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow."
        ],
        "​Retrieving the Final Output": [
            "When you run a Flow, the final output is determined by the last method that completes. Thekickoff()method returns the output of this final method.",
            "Here’s how you can access the final output:",
            "In this example, thesecond_methodis the last method to complete, so its output will be the final output of the Flow.\nThekickoff()method will return the final output, which is then printed to the console."
        ],
        "​Accessing and Updating State": [
            "In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.",
            "Here’s an example of how to update and access the state:",
            "In this example, the state is updated by bothfirst_methodandsecond_method.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.",
            "By ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution."
        ],
        "​Flow State Management": [
            "Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs."
        ],
        "​Choosing Between Unstructured and Structured State Management": [
            "By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements."
        ],
        "​Flow Control": [],
        "​Conditional Logic:or": [
            "Theor_function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered by the output of either thestart_methodor thesecond_method.\nTheor_function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output."
        ],
        "​Conditional Logic:and": [
            "Theand_function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.",
            "When you run this Flow, theloggermethod will be triggered only when both thestart_methodand thesecond_methodemit an output.\nTheand_function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output."
        ],
        "​Router": [
            "The@router()decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.",
            "In the above example, thestart_methodgenerates a random boolean value and sets it in the state.\nThesecond_methoduses the@router()decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean isTrue, the method returns\"success\", and if it isFalse, the method returns\"failed\".\nThethird_methodandfourth_methodlisten to the output of thesecond_methodand execute based on the returned value.",
            "When you run this Flow, the output will change based on the random boolean value generated by thestart_method."
        ],
        "​Adding Crews to Flows": [
            "Creating a flow with multiple crews in CrewAI is straightforward.",
            "You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:",
            "This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew calledpoem_crewthat is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews."
        ],
        "​Folder Structure": [
            "After adding a new crew, your folder structure will look like this:",
            "You can then customize theagents.yamlandtasks.yamlfiles to define the agents and tasks for your new crew. Thename_of_crew.pyfile will contain the crew’s logic, which you can modify to suit your needs.",
            "By using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together."
        ],
        "​Building Your Crews": [
            "In thecrewsfolder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, thepoem_crewfolder contains:",
            "You can copy, paste, and edit thepoem_crewto create other crews."
        ],
        "​Connecting Crews inmain.py": [
            "Themain.pyfile is where you create your flow and connect the crews together. You can define your flow by using theFlowclass and the decorators@startand@listento specify the flow of execution.",
            "Here’s an example of how you can connect thepoem_crewin themain.pyfile:",
            "In this example, thePoemFlowclass defines a flow that generates a sentence count, uses thePoemCrewto generate a poem, and then saves the poem to a file. The flow is kicked off by calling thekickoff()method."
        ],
        "​Running the Flow": [
            "(Optional) Before running the flow, you can install the dependencies by running:",
            "Once all of the dependencies are installed, you need to activate the virtual environment by running:",
            "After activating the virtual environment, you can run the flow by executing one of the following commands:",
            "or",
            "The flow will execute, and you should see the output in the console."
        ],
        "​Adding Additional Crews Using the CLI": [
            "Once you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.",
            "To add a new crew to your existing flow, use the following command:",
            "This command will create a new directory for your crew within thecrewsfolder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup."
        ],
        "​Plot Flows": [
            "Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows."
        ],
        "​What are Plots?": [
            "Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations."
        ],
        "​How to Generate a Plot": [
            "CrewAI provides two convenient methods to generate plots of your flows:"
        ],
        "​Option 1: Using theplot()Method": [
            "If you are working directly with a flow instance, you can generate a plot by calling theplot()method on your flow object. This method will create an HTML file containing the interactive plot of your flow.",
            "This will generate a file namedmy_flow_plot.htmlin your current directory. You can open this file in a web browser to view the interactive plot."
        ],
        "​Option 2: Using the Command Line": [
            "If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.",
            "This command will generate an HTML file with the plot of your flow, similar to theplot()method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow."
        ],
        "​Understanding the Plot": [
            "The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.",
            "By visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others."
        ],
        "​Advanced": [
            "In this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback."
        ],
        "​1) Self-Evaluation Loop": [
            "The self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved."
        ],
        "​Overview": [
            "The self-evaluation loop involves two main Crews:",
            "The process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement."
        ],
        "​Importance": [
            "This pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results."
        ],
        "​Main Code Highlights": [
            "Below is themain.pyfile for the self-evaluation loop flow:"
        ],
        "​Code Highlights": [
            "For a complete example and further details, please refer to theSelf Evaluation Loop Flow repository."
        ],
        "​Next Steps": [
            "If you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:",
            "By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.",
            "Also, check out our YouTube video on how to use flows in CrewAI below!"
        ]
    },
    "https://docs.crewai.com/concepts/llms#large-language-models-llms-in-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#key-concepts": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#configuring-llms-for-agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#1-default-configuration": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#2-custom-llm-objects": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#connecting-to-openai-compatible-llms": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#llm-configuration-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#changing-the-base-api-url": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#best-practices": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/llms#troubleshooting": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "LLMs": [],
        "​Large Language Models (LLMs) in CrewAI": [
            "Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects."
        ],
        "​Key Concepts": [],
        "​Configuring LLMs for Agents": [
            "CrewAI offers flexible options for setting up LLMs:"
        ],
        "​1. Default Configuration": [
            "By default, CrewAI uses thegpt-4o-minimodel. It uses environment variables if no LLM is specified:"
        ],
        "​2. Custom LLM Objects": [
            "Pass a custom LLM implementation or object from another library.",
            "See below for examples."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​LLM Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "These are examples of how to configure LLMs for your agent."
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Best Practices": [],
        "​Troubleshooting": []
    },
    "https://docs.crewai.com/concepts/processes#understanding-processes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#process-implementations": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#the-role-of-processes-in-teamwork": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#assigning-processes-to-a-crew": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#sequential-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#hierarchical-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#process-class-detailed-overview": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/processes#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Processes": [],
        "​Understanding Processes": [],
        "​Process Implementations": [],
        "​The Role of Processes in Teamwork": [
            "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
        ],
        "​Assigning Processes to a Crew": [
            "To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to definemanager_llmormanager_agentfor the manager agent.",
            "Note:Ensuremy_agentsandmy_tasksare defined prior to creating aCrewobject, and for the hierarchical process, eithermanager_llmormanager_agentis also required."
        ],
        "​Sequential Process": [
            "This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.",
            "To customize task context, utilize thecontextparameter in theTaskclass to specify outputs that should be used as context for subsequent tasks."
        ],
        "​Hierarchical Process": [
            "Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion."
        ],
        "​Process Class: Detailed Overview": [
            "TheProcessclass is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential,hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation."
        ],
        "​Conclusion": [
            "The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration#collaboration-fundamentals": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration#enhanced-attributes-for-improved-collaboration": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration#delegation-dividing-to-conquer": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration#implementing-collaboration-and-delegation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration#example-scenario": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/collaboration#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Collaboration": [],
        "​Collaboration Fundamentals": [
            "Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem."
        ],
        "​Enhanced Attributes for Improved Collaboration": [
            "TheCrewclass has been enriched with several attributes to support advanced functionalities:"
        ],
        "​Delegation (Dividing to Conquer)": [
            "Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability."
        ],
        "​Implementing Collaboration and Delegation": [
            "Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs."
        ],
        "​Example Scenario": [
            "Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow."
        ],
        "​Conclusion": [
            "The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation."
        ]
    },
    "https://docs.crewai.com/concepts/training#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Training": [],
        "​Introduction": [
            "The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).\nBy running the commandcrewai train -n <n_iterations>, you can specify the number of iterations for the training process.",
            "During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.\nThis helps the agents improve their understanding, decision-making, and problem-solving abilities."
        ],
        "​Training Your Crew Using the CLI": [
            "To use the training feature, follow these steps:"
        ],
        "​Training Your Crew Programmatically": [
            "To train your crew programmatically, use the following steps:"
        ],
        "​Key Points to Note": [
            "It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.",
            "Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.",
            "Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.",
            "Happy training with CrewAI! 🚀"
        ]
    },
    "https://docs.crewai.com/concepts/training#training-your-crew-using-the-cli": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Training": [],
        "​Introduction": [
            "The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).\nBy running the commandcrewai train -n <n_iterations>, you can specify the number of iterations for the training process.",
            "During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.\nThis helps the agents improve their understanding, decision-making, and problem-solving abilities."
        ],
        "​Training Your Crew Using the CLI": [
            "To use the training feature, follow these steps:"
        ],
        "​Training Your Crew Programmatically": [
            "To train your crew programmatically, use the following steps:"
        ],
        "​Key Points to Note": [
            "It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.",
            "Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.",
            "Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.",
            "Happy training with CrewAI! 🚀"
        ]
    },
    "https://docs.crewai.com/concepts/training#training-your-crew-programmatically": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Training": [],
        "​Introduction": [
            "The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).\nBy running the commandcrewai train -n <n_iterations>, you can specify the number of iterations for the training process.",
            "During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.\nThis helps the agents improve their understanding, decision-making, and problem-solving abilities."
        ],
        "​Training Your Crew Using the CLI": [
            "To use the training feature, follow these steps:"
        ],
        "​Training Your Crew Programmatically": [
            "To train your crew programmatically, use the following steps:"
        ],
        "​Key Points to Note": [
            "It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.",
            "Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.",
            "Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.",
            "Happy training with CrewAI! 🚀"
        ]
    },
    "https://docs.crewai.com/concepts/training#key-points-to-note": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Training": [],
        "​Introduction": [
            "The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).\nBy running the commandcrewai train -n <n_iterations>, you can specify the number of iterations for the training process.",
            "During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.\nThis helps the agents improve their understanding, decision-making, and problem-solving abilities."
        ],
        "​Training Your Crew Using the CLI": [
            "To use the training feature, follow these steps:"
        ],
        "​Training Your Crew Programmatically": [
            "To train your crew programmatically, use the following steps:"
        ],
        "​Key Points to Note": [
            "It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.",
            "Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.",
            "Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.",
            "Happy training with CrewAI! 🚀"
        ]
    },
    "https://docs.crewai.com/concepts/memory#introduction-to-memory-systems-in-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#memory-system-components": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#how-memory-systems-empower-agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#implementing-memory-in-your-crew": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#example-configuring-memory-for-a-crew": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#example-use-custom-memory-instances-e-g-faiss-as-the-vectordb": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#additional-embedding-providers": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-openai-embeddings-already-default": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-ollama-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-google-ai-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-azure-openai-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-vertex-ai-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-cohere-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-huggingface-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#using-watson-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#resetting-memory": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#resetting-memory-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#benefits-of-using-crewais-memory-system": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/memory#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Memory": [],
        "​Introduction to Memory Systems in CrewAI": [
            "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprisesshort-term memory,long-term memory,entity memory, andcontextual memory, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions."
        ],
        "​Memory System Components": [],
        "​How Memory Systems Empower Agents": [],
        "​Implementing Memory in Your Crew": [
            "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by settingmemory=Truein the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by settingembedderto a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
            "The ‘embedder’ only applies toShort-Term Memorywhich uses Chroma for RAG.\nTheLong-Term Memoryuses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using theCREWAI_STORAGE_DIRenvironment variable."
        ],
        "​Example: Configuring Memory for a Crew": [],
        "​Example: Use Custom Memory Instances e.g FAISS as the VectorDB": [],
        "​Additional Embedding Providers": [],
        "​Using OpenAI embeddings (already default)": [
            "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
            "Example:"
        ],
        "​Using Ollama embeddings": [],
        "​Using Google AI embeddings": [],
        "​Using Azure OpenAI embeddings": [],
        "​Using Vertex AI embeddings": [],
        "​Using Cohere embeddings": [],
        "​Using HuggingFace embeddings": [],
        "​Using Watson embeddings": [],
        "​Resetting Memory": [],
        "​Resetting Memory Options": [],
        "​Benefits of Using CrewAI’s Memory System": [],
        "​Conclusion": [
            "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability."
        ]
    },
    "https://docs.crewai.com/concepts/planning#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Planning": [],
        "​Introduction": [
            "The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,\nall Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description."
        ],
        "​Using the Planning Feature": [
            "Getting started with the planning feature is very easy, the only step required is to addplanning=Trueto your Crew:",
            "From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration."
        ],
        "​Planning LLM": [
            "Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.",
            "When running the base case example, you will see something like the output below, which represents the output of theAgentPlannerresponsible for creating the step-by-step logic to add to the Agents’ tasks."
        ]
    },
    "https://docs.crewai.com/concepts/planning#using-the-planning-feature": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Planning": [],
        "​Introduction": [
            "The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,\nall Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description."
        ],
        "​Using the Planning Feature": [
            "Getting started with the planning feature is very easy, the only step required is to addplanning=Trueto your Crew:",
            "From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration."
        ],
        "​Planning LLM": [
            "Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.",
            "When running the base case example, you will see something like the output below, which represents the output of theAgentPlannerresponsible for creating the step-by-step logic to add to the Agents’ tasks."
        ]
    },
    "https://docs.crewai.com/concepts/planning#planning-llm": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Planning": [],
        "​Introduction": [
            "The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,\nall Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description."
        ],
        "​Using the Planning Feature": [
            "Getting started with the planning feature is very easy, the only step required is to addplanning=Trueto your Crew:",
            "From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration."
        ],
        "​Planning LLM": [
            "Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.",
            "When running the base case example, you will see something like the output below, which represents the output of theAgentPlannerresponsible for creating the step-by-step logic to add to the Agents’ tasks."
        ]
    },
    "https://docs.crewai.com/concepts/testing#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Testing": [],
        "​Introduction": [
            "Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities."
        ],
        "​Using the Testing Feature": [
            "We added the CLI commandcrewai testto make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters aren_iterationsandmodel, which are optional and default to 2 andgpt-4o-minirespectively. For now, the only provider available is OpenAI.",
            "If you want to run more iterations or use a different model, you can specify the parameters like this:",
            "or using the short forms:",
            "When you run thecrewai testcommand, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.",
            "A table of scores at the end will show the performance of the crew in terms of the following metrics:",
            "The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole."
        ]
    },
    "https://docs.crewai.com/concepts/testing#using-the-testing-feature": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Testing": [],
        "​Introduction": [
            "Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities."
        ],
        "​Using the Testing Feature": [
            "We added the CLI commandcrewai testto make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters aren_iterationsandmodel, which are optional and default to 2 andgpt-4o-minirespectively. For now, the only provider available is OpenAI.",
            "If you want to run more iterations or use a different model, you can specify the parameters like this:",
            "or using the short forms:",
            "When you run thecrewai testcommand, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.",
            "A table of scores at the end will show the performance of the crew in terms of the following metrics:",
            "The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole."
        ]
    },
    "https://docs.crewai.com/concepts/cli#crewai-cli-documentation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#basic-usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#available-commands": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#1-create": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#2-version": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#3-train": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#4-replay": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#5-log-tasks-outputs": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#6-reset-memories": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#7-test": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#8-run": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#9-api-keys": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#initial-api-key-providers": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/cli#other-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CLI": [],
        "​CrewAI CLI Documentation": [
            "The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows."
        ],
        "​Installation": [
            "To use the CrewAI CLI, make sure you have CrewAI installed:"
        ],
        "​Basic Usage": [
            "The basic structure of a CrewAI CLI command is:"
        ],
        "​Available Commands": [],
        "​1. Create": [
            "Create a new crew or pipeline.",
            "Example:"
        ],
        "​2. Version": [
            "Show the installed version of CrewAI.",
            "Example:"
        ],
        "​3. Train": [
            "Train the crew for a specified number of iterations.",
            "Example:"
        ],
        "​4. Replay": [
            "Replay the crew execution from a specific task.",
            "Example:"
        ],
        "​5. Log-tasks-outputs": [
            "Retrieve your latest crew.kickoff() task outputs."
        ],
        "​6. Reset-memories": [
            "Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).",
            "Example:"
        ],
        "​7. Test": [
            "Test the crew and evaluate the results.",
            "Example:"
        ],
        "​8. Run": [
            "Run the crew."
        ],
        "​9. API Keys": [
            "When runningcrewai create crewcommand, the CLI will first show you the top 5 most common LLM providers and ask you to select one.",
            "Once you’ve selected an LLM provider, you will be prompted for API keys."
        ],
        "​Initial API key providers": [
            "The CLI will initially prompt for API keys for the following services:",
            "When you select a provider, the CLI will prompt you to enter your API key."
        ],
        "​Other Options": [
            "If you select option 6, you will be able to select from a list of LiteLLM supported providers.",
            "When you select a provider, the CLI will prompt you to enter the Key name and the API key.",
            "See the following link for each provider’s key name:"
        ]
    },
    "https://docs.crewai.com/concepts/tools#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#what-is-a-tool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#key-characteristics-of-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#using-crewai-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#available-crewai-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#creating-your-own-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#subclassing-basetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#utilizing-the-tool-decorator": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#custom-caching-mechanism": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/tools#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Introduction": [
            "CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools."
        ],
        "​What is a Tool?": [
            "A tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from theCrewAI ToolkitandLangChain Tools,\nenabling everything from simple searches to complex interactions and effective teamwork among agents."
        ],
        "​Key Characteristics of Tools": [],
        "​Using CrewAI Tools": [
            "To enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:",
            "Here’s an example demonstrating their use:"
        ],
        "​Available CrewAI Tools": [
            "Here is a list of the available tools and their descriptions:"
        ],
        "​Creating your own Tools": [
            "There are two main ways for one to create a CrewAI tool:"
        ],
        "​SubclassingBaseTool": [],
        "​Utilizing thetoolDecorator": [],
        "​Custom Caching Mechanism": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/langchain-tools#using-langchain-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Using LangChain Tools": [],
        "​Using LangChain Tools": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms,\nand the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/langchain-tools#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Using LangChain Tools": [],
        "​Using LangChain Tools": [],
        "​Conclusion": [
            "Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms,\nand the flexibility of tool arguments to optimize your agents’ performance and capabilities."
        ]
    },
    "https://docs.crewai.com/concepts/llamaindex-tools#using-llamaindex-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Using LlamaIndex Tools": [],
        "​Using LlamaIndex Tools": [
            "Here are the available built-in tools offered by LlamaIndex."
        ],
        "​Steps to Get Started": [
            "To effectively use the LlamaIndexTool, follow these steps:"
        ]
    },
    "https://docs.crewai.com/concepts/llamaindex-tools#steps-to-get-started": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Using LlamaIndex Tools": [],
        "​Using LlamaIndex Tools": [
            "Here are the available built-in tools offered by LlamaIndex."
        ],
        "​Steps to Get Started": [
            "To effectively use the LlamaIndexTool, follow these steps:"
        ]
    },
    "https://docs.crewai.com/how-to/create-custom-tools#creating-and-utilizing-tools-in-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Custom Tools": [],
        "​Creating and Utilizing Tools in CrewAI": [
            "This guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,\nenabling agents to perform a wide range of actions."
        ],
        "​SubclassingBaseTool": [
            "To create a personalized tool, inherit fromBaseTooland define the necessary attributes, including theargs_schemafor input validation, and the_runmethod."
        ],
        "​Using thetoolDecorator": [
            "Alternatively, you can use the tool decorator@tool. This approach allows you to define the tool’s attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to your needs."
        ],
        "​Defining a Cache Function for the Tool": [
            "To optimize tool performance with caching, define custom caching strategies using thecache_functionattribute.",
            "By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,\nyou can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents."
        ]
    },
    "https://docs.crewai.com/how-to/create-custom-tools#subclassing-basetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Custom Tools": [],
        "​Creating and Utilizing Tools in CrewAI": [
            "This guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,\nenabling agents to perform a wide range of actions."
        ],
        "​SubclassingBaseTool": [
            "To create a personalized tool, inherit fromBaseTooland define the necessary attributes, including theargs_schemafor input validation, and the_runmethod."
        ],
        "​Using thetoolDecorator": [
            "Alternatively, you can use the tool decorator@tool. This approach allows you to define the tool’s attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to your needs."
        ],
        "​Defining a Cache Function for the Tool": [
            "To optimize tool performance with caching, define custom caching strategies using thecache_functionattribute.",
            "By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,\nyou can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents."
        ]
    },
    "https://docs.crewai.com/how-to/create-custom-tools#using-the-tool-decorator": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Custom Tools": [],
        "​Creating and Utilizing Tools in CrewAI": [
            "This guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,\nenabling agents to perform a wide range of actions."
        ],
        "​SubclassingBaseTool": [
            "To create a personalized tool, inherit fromBaseTooland define the necessary attributes, including theargs_schemafor input validation, and the_runmethod."
        ],
        "​Using thetoolDecorator": [
            "Alternatively, you can use the tool decorator@tool. This approach allows you to define the tool’s attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to your needs."
        ],
        "​Defining a Cache Function for the Tool": [
            "To optimize tool performance with caching, define custom caching strategies using thecache_functionattribute.",
            "By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,\nyou can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents."
        ]
    },
    "https://docs.crewai.com/how-to/create-custom-tools#defining-a-cache-function-for-the-tool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Custom Tools": [],
        "​Creating and Utilizing Tools in CrewAI": [
            "This guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,\nenabling agents to perform a wide range of actions."
        ],
        "​SubclassingBaseTool": [
            "To create a personalized tool, inherit fromBaseTooland define the necessary attributes, including theargs_schemafor input validation, and the_runmethod."
        ],
        "​Using thetoolDecorator": [
            "Alternatively, you can use the tool decorator@tool. This approach allows you to define the tool’s attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to your needs."
        ],
        "​Defining a Cache Function for the Tool": [
            "To optimize tool performance with caching, define custom caching strategies using thecache_functionattribute.",
            "By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,\nyou can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#sequential-process-overview": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#key-features": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#implementing-the-sequential-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#note": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#workflow-in-action": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#advanced-features": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#task-delegation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#asynchronous-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#memory-and-caching": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#callbacks": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#usage-metrics": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/sequential-process#best-practices-for-sequential-processes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Sequential Processes": [],
        "​Introduction": [
            "CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion."
        ],
        "​Sequential Process Overview": [
            "The sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order."
        ],
        "​Key Features": [],
        "​Implementing the Sequential Process": [
            "To use the sequential process, assemble your crew and define tasks in the order they need to be executed."
        ],
        "​Note:": [
            "Each task in a sequential processmusthave an agent assigned. Ensure that everyTaskincludes anagentparameter."
        ],
        "​Workflow in Action": [],
        "​Advanced Features": [],
        "​Task Delegation": [
            "In sequential processes, if an agent hasallow_delegationset toTrue, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew."
        ],
        "​Asynchronous Execution": [
            "Tasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, setasync_execution=Truewhen defining the task."
        ],
        "​Memory and Caching": [
            "CrewAI supports both memory and caching features:"
        ],
        "​Callbacks": [
            "You can set callbacks at both the task and step level:"
        ],
        "​Usage Metrics": [
            "CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution."
        ],
        "​Best Practices for Sequential Processes": [
            "This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process#hierarchical-process-overview": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process#key-features": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process#implementing-the-hierarchical-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process#workflow-in-action": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/hierarchical-process#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Hierarchical Process": [],
        "​Introduction": [
            "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy."
        ],
        "​Hierarchical Process Overview": [
            "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user."
        ],
        "​Key Features": [],
        "​Implementing the Hierarchical Process": [
            "To utilize the hierarchical process, it’s essential to explicitly set the process attribute toProcess.hierarchical, as the default behavior isProcess.sequential.\nDefine a crew with a designated manager and establish a clear chain of command."
        ],
        "​Workflow in Action": [],
        "​Conclusion": [
            "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success."
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent#setting-a-specific-agent-as-manager-in-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent#using-the-manager-agent-attribute": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent#custom-manager-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent#benefits-of-a-custom-manager-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/custom-manager-agent#setting-a-manager-llm": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Create Your Own Manager Agent": [],
        "​Setting a Specific Agent as Manager in CrewAI": [
            "CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements."
        ],
        "​Using themanager_agentAttribute": [],
        "​Custom Manager Agent": [
            "Themanager_agentattribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard."
        ],
        "​Example": [],
        "​Benefits of a Custom Manager Agent": [],
        "​Setting a Manager LLM": [
            "If you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:"
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#connect-crewai-to-llms": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#supported-providers": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#changing-the-llm": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#configuration-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#connecting-to-openai-compatible-llms": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#using-local-models-with-ollama": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#changing-the-base-api-url": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/llm-connections#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Connect to any LLM": [],
        "​Connect CrewAI to LLMs": [
            "CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface."
        ],
        "​Supported Providers": [
            "LiteLLM supports a wide range of providers, including but not limited to:",
            "For a complete and up-to-date list of supported providers, please refer to theLiteLLM Providers documentation."
        ],
        "​Changing the LLM": [
            "To use a different LLM with your CrewAI agents, you have several options:"
        ],
        "​Configuration Options": [
            "When configuring an LLM for your agent, you have access to a wide range of parameters:",
            "For a complete list of parameters and their descriptions, refer to the LLM class documentation."
        ],
        "​Connecting to OpenAI-Compatible LLMs": [
            "You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:"
        ],
        "​Using Local Models with Ollama": [
            "For local models like those provided by Ollama:"
        ],
        "​Changing the Base API URL": [
            "You can change the base API URL for any LLM provider by setting thebase_urlparameter:",
            "This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider."
        ],
        "​Conclusion": [
            "By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult theLiteLLM documentationfor the most up-to-date information on supported models and configuration options."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#customizable-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#key-attributes-for-customization": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#advanced-customization-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#language-model-customization": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#performance-and-debugging-settings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#verbose-mode-and-rpm-limit": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#maximum-iterations-for-task-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#customizing-agents-and-tools": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#example-assigning-tools-to-an-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#delegation-and-autonomy": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#example-disabling-delegation-for-an-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/customizing-agents#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Customize Agents": [],
        "​Customizable Attributes": [
            "Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize."
        ],
        "​Key Attributes for Customization": [],
        "​Advanced Customization Options": [
            "Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly."
        ],
        "​Language Model Customization": [
            "Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting thefunction_calling_llmallows for overriding the default crew function-calling language model, providing a greater degree of customization."
        ],
        "​Performance and Debugging Settings": [
            "Adjusting an agent’s performance and monitoring its operations are crucial for efficient task execution."
        ],
        "​Verbose Mode and RPM Limit": [],
        "​Maximum Iterations for Task Execution": [
            "Themax_iterattribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer."
        ],
        "​Customizing Agents and Tools": [
            "Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThetoolsattribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements."
        ],
        "​Example: Assigning Tools to an Agent": [],
        "​Delegation and Autonomy": [
            "Controlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\ntheallow_delegationattribute is now set toFalse, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements."
        ],
        "​Example: Disabling Delegation for an Agent": [],
        "​Conclusion": [
            "Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges."
        ]
    },
    "https://docs.crewai.com/how-to/coding-agents#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Coding Agents": [],
        "​Introduction": [
            "CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions."
        ],
        "​Enabling Code Execution": [
            "To enable code execution for an agent, set theallow_code_executionparameter toTruewhen creating the agent.",
            "Here’s an example:"
        ],
        "​Important Considerations": [],
        "​Code Execution Process": [
            "When an agent with code execution enabled encounters a task requiring programming:"
        ],
        "​Example Usage": [
            "Here’s a detailed example of creating an agent with code execution capabilities and using it in a task:",
            "In this example, thecoding_agentcan write and execute Python code to perform data analysis tasks."
        ]
    },
    "https://docs.crewai.com/how-to/coding-agents#enabling-code-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Coding Agents": [],
        "​Introduction": [
            "CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions."
        ],
        "​Enabling Code Execution": [
            "To enable code execution for an agent, set theallow_code_executionparameter toTruewhen creating the agent.",
            "Here’s an example:"
        ],
        "​Important Considerations": [],
        "​Code Execution Process": [
            "When an agent with code execution enabled encounters a task requiring programming:"
        ],
        "​Example Usage": [
            "Here’s a detailed example of creating an agent with code execution capabilities and using it in a task:",
            "In this example, thecoding_agentcan write and execute Python code to perform data analysis tasks."
        ]
    },
    "https://docs.crewai.com/how-to/coding-agents#important-considerations": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Coding Agents": [],
        "​Introduction": [
            "CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions."
        ],
        "​Enabling Code Execution": [
            "To enable code execution for an agent, set theallow_code_executionparameter toTruewhen creating the agent.",
            "Here’s an example:"
        ],
        "​Important Considerations": [],
        "​Code Execution Process": [
            "When an agent with code execution enabled encounters a task requiring programming:"
        ],
        "​Example Usage": [
            "Here’s a detailed example of creating an agent with code execution capabilities and using it in a task:",
            "In this example, thecoding_agentcan write and execute Python code to perform data analysis tasks."
        ]
    },
    "https://docs.crewai.com/how-to/coding-agents#code-execution-process": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Coding Agents": [],
        "​Introduction": [
            "CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions."
        ],
        "​Enabling Code Execution": [
            "To enable code execution for an agent, set theallow_code_executionparameter toTruewhen creating the agent.",
            "Here’s an example:"
        ],
        "​Important Considerations": [],
        "​Code Execution Process": [
            "When an agent with code execution enabled encounters a task requiring programming:"
        ],
        "​Example Usage": [
            "Here’s a detailed example of creating an agent with code execution capabilities and using it in a task:",
            "In this example, thecoding_agentcan write and execute Python code to perform data analysis tasks."
        ]
    },
    "https://docs.crewai.com/how-to/coding-agents#example-usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Coding Agents": [],
        "​Introduction": [
            "CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions."
        ],
        "​Enabling Code Execution": [
            "To enable code execution for an agent, set theallow_code_executionparameter toTruewhen creating the agent.",
            "Here’s an example:"
        ],
        "​Important Considerations": [],
        "​Code Execution Process": [
            "When an agent with code execution enabled encounters a task requiring programming:"
        ],
        "​Example Usage": [
            "Here’s a detailed example of creating an agent with code execution capabilities and using it in a task:",
            "In this example, thecoding_agentcan write and execute Python code to perform data analysis tasks."
        ]
    },
    "https://docs.crewai.com/how-to/force-tool-output-as-result#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Force Tool Output as Result": [],
        "​Introduction": [
            "In CrewAI, you can force the output of a tool as the result of an agent’s task.\nThis feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution."
        ],
        "​Forcing Tool Output as Result": [
            "To force the tool output as the result of an agent’s task, you need to set theresult_as_answerparameter toTruewhen adding a tool to the agent.\nThis parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.",
            "Here’s an example of how to force the tool output as the result of an agent’s task:"
        ],
        "​Workflow in Action": []
    },
    "https://docs.crewai.com/how-to/force-tool-output-as-result#forcing-tool-output-as-result": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Force Tool Output as Result": [],
        "​Introduction": [
            "In CrewAI, you can force the output of a tool as the result of an agent’s task.\nThis feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution."
        ],
        "​Forcing Tool Output as Result": [
            "To force the tool output as the result of an agent’s task, you need to set theresult_as_answerparameter toTruewhen adding a tool to the agent.\nThis parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.",
            "Here’s an example of how to force the tool output as the result of an agent’s task:"
        ],
        "​Workflow in Action": []
    },
    "https://docs.crewai.com/how-to/force-tool-output-as-result#workflow-in-action": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Force Tool Output as Result": [],
        "​Introduction": [
            "In CrewAI, you can force the output of a tool as the result of an agent’s task.\nThis feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution."
        ],
        "​Forcing Tool Output as Result": [
            "To force the tool output as the result of an agent’s task, you need to set theresult_as_answerparameter toTruewhen adding a tool to the agent.\nThis parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.",
            "Here’s an example of how to force the tool output as the result of an agent’s task:"
        ],
        "​Workflow in Action": []
    },
    "https://docs.crewai.com/how-to/human-input-on-execution#human-input-in-agent-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Human Input on Execution": [],
        "​Human input in agent execution": [
            "Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary.\nThis feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively."
        ],
        "​Using human input with CrewAI": [
            "To integrate human input into agent execution, set thehuman_inputflag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer.\nThis input can provide extra context, clarify ambiguities, or validate the agent’s output."
        ],
        "​Example:": []
    },
    "https://docs.crewai.com/how-to/human-input-on-execution#using-human-input-with-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Human Input on Execution": [],
        "​Human input in agent execution": [
            "Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary.\nThis feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively."
        ],
        "​Using human input with CrewAI": [
            "To integrate human input into agent execution, set thehuman_inputflag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer.\nThis input can provide extra context, clarify ambiguities, or validate the agent’s output."
        ],
        "​Example:": []
    },
    "https://docs.crewai.com/how-to/human-input-on-execution#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Human Input on Execution": [],
        "​Human input in agent execution": [
            "Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary.\nThis feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively."
        ],
        "​Using human input with CrewAI": [
            "To integrate human input into agent execution, set thehuman_inputflag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer.\nThis input can provide extra context, clarify ambiguities, or validate the agent’s output."
        ],
        "​Example:": []
    },
    "https://docs.crewai.com/how-to/kickoff-async#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#asynchronous-crew-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#method-signature": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#parameters": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#returns": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#potential-use-cases": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#example-single-asynchronous-crew-execution": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-async#example-multiple-asynchronous-crew-executions": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew Asynchronously": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing."
        ],
        "​Asynchronous Crew Execution": [
            "To kickoff a crew asynchronously, use thekickoff_async()method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks."
        ],
        "​Method Signature": [],
        "​Parameters": [],
        "​Returns": [],
        "​Potential Use Cases": [],
        "​Example: Single Asynchronous Crew Execution": [
            "Here’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:"
        ],
        "​Example: Multiple Asynchronous Crew Executions": [
            "In this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete usingasyncio.gather():"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-for-each#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew for Each": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list.\nThis feature is particularly useful when you need to perform the same set of tasks for multiple items."
        ],
        "​Kicking Off a Crew for Each Item": [
            "To kickoff a crew for each item in a list, use thekickoff_for_each()method.\nThis method executes the crew for each item in the list, allowing you to process multiple items efficiently.",
            "Here’s an example of how to kickoff a crew for each item in a list:"
        ]
    },
    "https://docs.crewai.com/how-to/kickoff-for-each#kicking-off-a-crew-for-each-item": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Kickoff Crew for Each": [],
        "​Introduction": [
            "CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list.\nThis feature is particularly useful when you need to perform the same set of tasks for multiple items."
        ],
        "​Kicking Off a Crew for Each Item": [
            "To kickoff a crew for each item in a list, use thekickoff_for_each()method.\nThis method executes the crew for each item in the list, allowing you to process multiple items efficiently.",
            "Here’s an example of how to kickoff a crew for each item in a list:"
        ]
    },
    "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Replay Tasks from Latest Crew Kickoff": [],
        "​Introduction": [
            "CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you’ve finished a kickoff and may want to retry certain tasks or don’t need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.",
            "Here’s an example of how to replay from a task:"
        ],
        "​Replaying from Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:"
        ],
        "​Replaying from a Task Programmatically": [
            "To replay from a task programmatically, use the following steps:"
        ],
        "​Conclusion": [
            "With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.\nEnsure you follow the commands and steps precisely to make the most of these features."
        ]
    },
    "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff#replaying-from-specific-task-using-the-cli": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Replay Tasks from Latest Crew Kickoff": [],
        "​Introduction": [
            "CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you’ve finished a kickoff and may want to retry certain tasks or don’t need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.",
            "Here’s an example of how to replay from a task:"
        ],
        "​Replaying from Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:"
        ],
        "​Replaying from a Task Programmatically": [
            "To replay from a task programmatically, use the following steps:"
        ],
        "​Conclusion": [
            "With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.\nEnsure you follow the commands and steps precisely to make the most of these features."
        ]
    },
    "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff#replaying-from-a-task-programmatically": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Replay Tasks from Latest Crew Kickoff": [],
        "​Introduction": [
            "CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you’ve finished a kickoff and may want to retry certain tasks or don’t need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.",
            "Here’s an example of how to replay from a task:"
        ],
        "​Replaying from Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:"
        ],
        "​Replaying from a Task Programmatically": [
            "To replay from a task programmatically, use the following steps:"
        ],
        "​Conclusion": [
            "With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.\nEnsure you follow the commands and steps precisely to make the most of these features."
        ]
    },
    "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Replay Tasks from Latest Crew Kickoff": [],
        "​Introduction": [
            "CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you’ve finished a kickoff and may want to retry certain tasks or don’t need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.",
            "Here’s an example of how to replay from a task:"
        ],
        "​Replaying from Specific Task Using the CLI": [
            "To use the replay feature, follow these steps:"
        ],
        "​Replaying from a Task Programmatically": [
            "To replay from a task programmatically, use the following steps:"
        ],
        "​Conclusion": [
            "With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.\nEnsure you follow the commands and steps precisely to make the most of these features."
        ]
    },
    "https://docs.crewai.com/how-to/conditional-tasks#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Conditional Tasks": [],
        "​Introduction": [
            "Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks.\nThis powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes."
        ],
        "​Example Usage": []
    },
    "https://docs.crewai.com/how-to/conditional-tasks#example-usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Conditional Tasks": [],
        "​Introduction": [
            "Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks.\nThis powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes."
        ],
        "​Example Usage": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#introduction": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#agentops": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#overview": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#features": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#using-agentops": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#crew-agentops-examples": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#further-information": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/agentops-observability#extra-links": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with AgentOps": [],
        "​Introduction": [
            "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents."
        ],
        "​AgentOps": [
            "AgentOpsprovides session replays, metrics, and monitoring for agents.",
            "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out theAgentOps Repo."
        ],
        "​Overview": [
            "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
            "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
            ""
        ],
        "​Features": [],
        "​Using AgentOps": [],
        "​Crew + AgentOps Examples": [],
        "Job Posting": [],
        "Markdown Validator": [],
        "Instagram Post": [],
        "​Further Information": [
            "To get started, create anAgentOps account.",
            "For feature requests or bug reports, please reach out to the AgentOps team on theAgentOps Repo."
        ],
        "​Extra links": []
    },
    "https://docs.crewai.com/how-to/langtrace-observability#langtrace-overview": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with Langtrace": [],
        "​Langtrace Overview": [
            "Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases.\nWhile not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents.\nThis integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.",
            ""
        ],
        "​Setup Instructions": [],
        "​Features and Their Application to CrewAI": []
    },
    "https://docs.crewai.com/how-to/langtrace-observability#setup-instructions": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with Langtrace": [],
        "​Langtrace Overview": [
            "Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases.\nWhile not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents.\nThis integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.",
            ""
        ],
        "​Setup Instructions": [],
        "​Features and Their Application to CrewAI": []
    },
    "https://docs.crewai.com/how-to/langtrace-observability#features-and-their-application-to-crewai": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agent Monitoring with Langtrace": [],
        "​Langtrace Overview": [
            "Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases.\nWhile not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents.\nThis integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.",
            ""
        ],
        "​Setup Instructions": [],
        "​Features and Their Application to CrewAI": []
    },
    "https://docs.crewai.com/tools/browserbaseloadtool#browserbaseloadtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Browserbase Web Loader": [],
        "​BrowserbaseLoadTool": [],
        "​Description": [
            "Browserbaseis a developer platform to reliably run, manage, and monitor headless browsers.",
            "Power your AI data retrievals with:"
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theBrowserbaseLoadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/browserbaseloadtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Browserbase Web Loader": [],
        "​BrowserbaseLoadTool": [],
        "​Description": [
            "Browserbaseis a developer platform to reliably run, manage, and monitor headless browsers.",
            "Power your AI data retrievals with:"
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theBrowserbaseLoadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/browserbaseloadtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Browserbase Web Loader": [],
        "​BrowserbaseLoadTool": [],
        "​Description": [
            "Browserbaseis a developer platform to reliably run, manage, and monitor headless browsers.",
            "Power your AI data retrievals with:"
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theBrowserbaseLoadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/browserbaseloadtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Browserbase Web Loader": [],
        "​BrowserbaseLoadTool": [],
        "​Description": [
            "Browserbaseis a developer platform to reliably run, manage, and monitor headless browsers.",
            "Power your AI data retrievals with:"
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theBrowserbaseLoadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/browserbaseloadtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Browserbase Web Loader": [],
        "​BrowserbaseLoadTool": [],
        "​Description": [
            "Browserbaseis a developer platform to reliably run, manage, and monitor headless browsers.",
            "Power your AI data retrievals with:"
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theBrowserbaseLoadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool#codedocssearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codedocssearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Docs RAG Search": [],
        "​CodeDocsSearchTool": [],
        "​Description": [
            "The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing adocs_urlduring initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specificdocs_url,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs."
        ],
        "​Installation": [
            "To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:"
        ],
        "​Example": [
            "Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theCodeDocsSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/codeinterpretertool#codeinterpretertool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Interpreter": [],
        "​CodeInterpreterTool": [],
        "​Description": [
            "This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.",
            "This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install thecrewai_toolspackage"
        ],
        "​Example": [
            "Remember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.",
            "We also provide a simple way to use it directly from the Agent."
        ]
    },
    "https://docs.crewai.com/tools/codeinterpretertool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Interpreter": [],
        "​CodeInterpreterTool": [],
        "​Description": [
            "This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.",
            "This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install thecrewai_toolspackage"
        ],
        "​Example": [
            "Remember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.",
            "We also provide a simple way to use it directly from the Agent."
        ]
    },
    "https://docs.crewai.com/tools/codeinterpretertool#requirements": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Interpreter": [],
        "​CodeInterpreterTool": [],
        "​Description": [
            "This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.",
            "This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install thecrewai_toolspackage"
        ],
        "​Example": [
            "Remember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.",
            "We also provide a simple way to use it directly from the Agent."
        ]
    },
    "https://docs.crewai.com/tools/codeinterpretertool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Interpreter": [],
        "​CodeInterpreterTool": [],
        "​Description": [
            "This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.",
            "This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install thecrewai_toolspackage"
        ],
        "​Example": [
            "Remember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.",
            "We also provide a simple way to use it directly from the Agent."
        ]
    },
    "https://docs.crewai.com/tools/codeinterpretertool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Code Interpreter": [],
        "​CodeInterpreterTool": [],
        "​Description": [
            "This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.",
            "This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install thecrewai_toolspackage"
        ],
        "​Example": [
            "Remember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.",
            "We also provide a simple way to use it directly from the Agent."
        ]
    },
    "https://docs.crewai.com/tools/composiotool#composiotool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Composio Tool": [],
        "​ComposioTool": [],
        "​Description": [
            "This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:",
            "after the installation is complete, either runcomposio loginor export your composio API key asCOMPOSIO_API_KEY."
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a github action:",
            "If you don’t know what action you want to use, usefrom_appandtagsfilter to get relevant actions",
            "or useuse_caseto search relevant actions"
        ]
    },
    "https://docs.crewai.com/tools/composiotool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Composio Tool": [],
        "​ComposioTool": [],
        "​Description": [
            "This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:",
            "after the installation is complete, either runcomposio loginor export your composio API key asCOMPOSIO_API_KEY."
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a github action:",
            "If you don’t know what action you want to use, usefrom_appandtagsfilter to get relevant actions",
            "or useuse_caseto search relevant actions"
        ]
    },
    "https://docs.crewai.com/tools/composiotool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Composio Tool": [],
        "​ComposioTool": [],
        "​Description": [
            "This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:",
            "after the installation is complete, either runcomposio loginor export your composio API key asCOMPOSIO_API_KEY."
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a github action:",
            "If you don’t know what action you want to use, usefrom_appandtagsfilter to get relevant actions",
            "or useuse_caseto search relevant actions"
        ]
    },
    "https://docs.crewai.com/tools/composiotool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Composio Tool": [],
        "​ComposioTool": [],
        "​Description": [
            "This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:",
            "after the installation is complete, either runcomposio loginor export your composio API key asCOMPOSIO_API_KEY."
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a github action:",
            "If you don’t know what action you want to use, usefrom_appandtagsfilter to get relevant actions",
            "or useuse_caseto search relevant actions"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool#csvsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/csvsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "CSV RAG Search": [],
        "​CSVSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": [
            "The following parameters can be used to customize theCSVSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/dalletool#dalletool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DALL-E Tool": [],
        "​DallETool": [],
        "​Description": [
            "This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.\nThis tool allows the Agent to generate images based on the text input provided by the user."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [
            "Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.",
            "If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to theDallEToolclass. For example:",
            "The parameters are based on theclient.images.generatemethod from the OpenAI API. For more information on the parameters,\nplease refer to theOpenAI API documentation."
        ]
    },
    "https://docs.crewai.com/tools/dalletool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DALL-E Tool": [],
        "​DallETool": [],
        "​Description": [
            "This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.\nThis tool allows the Agent to generate images based on the text input provided by the user."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [
            "Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.",
            "If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to theDallEToolclass. For example:",
            "The parameters are based on theclient.images.generatemethod from the OpenAI API. For more information on the parameters,\nplease refer to theOpenAI API documentation."
        ]
    },
    "https://docs.crewai.com/tools/dalletool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DALL-E Tool": [],
        "​DallETool": [],
        "​Description": [
            "This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.\nThis tool allows the Agent to generate images based on the text input provided by the user."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [
            "Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.",
            "If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to theDallEToolclass. For example:",
            "The parameters are based on theclient.images.generatemethod from the OpenAI API. For more information on the parameters,\nplease refer to theOpenAI API documentation."
        ]
    },
    "https://docs.crewai.com/tools/dalletool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DALL-E Tool": [],
        "​DallETool": [],
        "​Description": [
            "This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.\nThis tool allows the Agent to generate images based on the text input provided by the user."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [
            "Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.",
            "If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to theDallEToolclass. For example:",
            "The parameters are based on theclient.images.generatemethod from the OpenAI API. For more information on the parameters,\nplease refer to theOpenAI API documentation."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool#directorysearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool#initialization-and-usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directorysearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory RAG Search": [],
        "​DirectorySearchTool": [],
        "​Description": [
            "The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup."
        ],
        "​Installation": [
            "To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:"
        ],
        "​Initialization and Usage": [
            "Import the DirectorySearchTool from thecrewai_toolspackage to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory."
        ],
        "​Arguments": [],
        "​Custom Model and Embeddings": [
            "The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users."
        ]
    },
    "https://docs.crewai.com/tools/directoryreadtool#directoryreadtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory Read": [],
        "​DirectoryReadTool": [],
        "​Description": [
            "The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories."
        ],
        "​Installation": [
            "To utilize the DirectoryReadTool in your project, install thecrewai_toolspackage. If this package is not yet part of your environment, you can install it using pip with the command below:",
            "This command installs the latest version of thecrewai_toolspackage, granting access to the DirectoryReadTool among other utilities."
        ],
        "​Example": [
            "Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDirectoryReadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/directoryreadtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory Read": [],
        "​DirectoryReadTool": [],
        "​Description": [
            "The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories."
        ],
        "​Installation": [
            "To utilize the DirectoryReadTool in your project, install thecrewai_toolspackage. If this package is not yet part of your environment, you can install it using pip with the command below:",
            "This command installs the latest version of thecrewai_toolspackage, granting access to the DirectoryReadTool among other utilities."
        ],
        "​Example": [
            "Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDirectoryReadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/directoryreadtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory Read": [],
        "​DirectoryReadTool": [],
        "​Description": [
            "The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories."
        ],
        "​Installation": [
            "To utilize the DirectoryReadTool in your project, install thecrewai_toolspackage. If this package is not yet part of your environment, you can install it using pip with the command below:",
            "This command installs the latest version of thecrewai_toolspackage, granting access to the DirectoryReadTool among other utilities."
        ],
        "​Example": [
            "Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDirectoryReadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/directoryreadtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory Read": [],
        "​DirectoryReadTool": [],
        "​Description": [
            "The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories."
        ],
        "​Installation": [
            "To utilize the DirectoryReadTool in your project, install thecrewai_toolspackage. If this package is not yet part of your environment, you can install it using pip with the command below:",
            "This command installs the latest version of thecrewai_toolspackage, granting access to the DirectoryReadTool among other utilities."
        ],
        "​Example": [
            "Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDirectoryReadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/directoryreadtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Directory Read": [],
        "​DirectoryReadTool": [],
        "​Description": [
            "The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories."
        ],
        "​Installation": [
            "To utilize the DirectoryReadTool in your project, install thecrewai_toolspackage. If this package is not yet part of your environment, you can install it using pip with the command below:",
            "This command installs the latest version of thecrewai_toolspackage, granting access to the DirectoryReadTool among other utilities."
        ],
        "​Example": [
            "Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDirectoryReadTool’s behavior:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool#docxsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/docxsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "DOCX RAG Search": [],
        "​DOCXSearchTool": [],
        "​Description": [
            "TheDOCXSearchToolis a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Install the crewai_tools package by running the following command in your terminal:"
        ],
        "​Example": [
            "The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path."
        ],
        "​Arguments": [
            "The following parameters can be used to customize theDOCXSearchTool’s behavior:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool#exasearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool#steps-to-get-started": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/exasearchtool#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "EXA Search Web Loader": [],
        "​EXASearchTool": [],
        "​Description": [
            "The EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes theexa.aiAPI to fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use the EXASearchTool, follow these steps:"
        ],
        "​Conclusion": [
            "By integrating theEXASearchToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/filereadtool#filereadtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Read": [],
        "​FileReadTool": [],
        "​Description": [
            "The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as.txt,.csv,.json, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use."
        ],
        "​Installation": [
            "To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:"
        ],
        "​Usage Example": [
            "To get started with the FileReadTool:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/filereadtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Read": [],
        "​FileReadTool": [],
        "​Description": [
            "The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as.txt,.csv,.json, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use."
        ],
        "​Installation": [
            "To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:"
        ],
        "​Usage Example": [
            "To get started with the FileReadTool:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/filereadtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Read": [],
        "​FileReadTool": [],
        "​Description": [
            "The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as.txt,.csv,.json, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use."
        ],
        "​Installation": [
            "To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:"
        ],
        "​Usage Example": [
            "To get started with the FileReadTool:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/filereadtool#usage-example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Read": [],
        "​FileReadTool": [],
        "​Description": [
            "The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as.txt,.csv,.json, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use."
        ],
        "​Installation": [
            "To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:"
        ],
        "​Usage Example": [
            "To get started with the FileReadTool:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/filereadtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Read": [],
        "​FileReadTool": [],
        "​Description": [
            "The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as.txt,.csv,.json, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use."
        ],
        "​Installation": [
            "To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:"
        ],
        "​Usage Example": [
            "To get started with the FileReadTool:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/filewritetool#filewritertool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/filewritetool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/filewritetool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/filewritetool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/filewritetool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/filewritetool#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "File Write": [],
        "​FileWriterTool": [],
        "​Description": [
            "TheFileWriterToolis a component of the crewai_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output."
        ],
        "​Installation": [
            "Install the crewai_tools package to use theFileWriterToolin your projects:"
        ],
        "​Example": [
            "To get started with theFileWriterTool:"
        ],
        "​Arguments": [],
        "​Conclusion": [
            "By integrating theFileWriterToolinto your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient."
        ]
    },
    "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool#firecrawlcrawlwebsitetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Crawl Website": [],
        "​FirecrawlCrawlWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Crawl Website": [],
        "​FirecrawlCrawlWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Crawl Website": [],
        "​FirecrawlCrawlWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Crawl Website": [],
        "​FirecrawlCrawlWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Crawl Website": [],
        "​FirecrawlCrawlWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlscrapewebsitetool#firecrawlscrapewebsitetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Scrape Website": [],
        "​FirecrawlScrapeWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlscrapewebsitetool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Scrape Website": [],
        "​FirecrawlScrapeWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlscrapewebsitetool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Scrape Website": [],
        "​FirecrawlScrapeWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlscrapewebsitetool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Scrape Website": [],
        "​FirecrawlScrapeWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlscrapewebsitetool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Scrape Website": [],
        "​FirecrawlScrapeWebsiteTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlsearchtool#firecrawlsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Search": [],
        "​FirecrawlSearchTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Search": [],
        "​FirecrawlSearchTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Search": [],
        "​FirecrawlSearchTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Search": [],
        "​FirecrawlSearchTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/firecrawlsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Firecrawl Search": [],
        "​FirecrawlSearchTool": [],
        "​Description": [
            "Firecrawlis a platform for crawling and convert any website into clean markdown or structured data."
        ],
        "​Installation": [],
        "​Example": [
            "Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:"
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/githubsearchtool#githubsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/githubsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/githubsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/githubsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/githubsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/githubsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Github Search": [],
        "​GithubSearchTool": [],
        "​Description": [
            "The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub."
        ],
        "​Installation": [
            "To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:",
            "This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package."
        ],
        "​Example": [
            "Here’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#serperdevtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#steps-to-get-started": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#parameters": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#example-with-parameters": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/serperdevtool#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Google Serper Search": [],
        "​SerperDevTool": [],
        "​Description": [
            "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes theserper.devAPI\nto fetch and display the most relevant search results based on the query provided by the user."
        ],
        "​Installation": [
            "To incorporate this tool into your project, follow the installation instructions below:"
        ],
        "​Example": [
            "The following example demonstrates how to initialize the tool and execute a search with a given query:"
        ],
        "​Steps to Get Started": [
            "To effectively use theSerperDevTool, follow these steps:"
        ],
        "​Parameters": [
            "TheSerperDevToolcomes with several parameters that will be passed to the API :",
            "The values forcountry,location,localeandsearch_urlcan be found on theSerper Playground."
        ],
        "​Example with Parameters": [
            "Here is an example demonstrating how to use the tool with additional parameters:"
        ],
        "​Conclusion": [
            "By integrating theSerperDevToolinto Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool#jsonsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool#usage-examples": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/jsonsearchtool#configuration-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "JSON RAG Search": [],
        "​JSONSearchTool": [],
        "​Description": [
            "The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results."
        ],
        "​Installation": [
            "To install the JSONSearchTool, use the following pip command:"
        ],
        "​Usage Examples": [
            "Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase."
        ],
        "​Arguments": [],
        "​Configuration Options": [
            "The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements."
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool#mdxsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool#usage-example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool#parameters": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mdxsearchtool#customization-of-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MDX RAG Search": [],
        "​MDXSearchTool": [],
        "​Description": [
            "The MDX Search Tool is a component of thecrewai_toolspackage aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections."
        ],
        "​Installation": [
            "Before using the MDX Search Tool, ensure thecrewai_toolspackage is installed. If it is not, you can install it with the following command:"
        ],
        "​Usage Example": [
            "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:"
        ],
        "​Parameters": [],
        "​Customization of Model and Embeddings": [
            "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool#mysqlsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/mysqltool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "MySQL RAG Search": [],
        "​MySQLSearchTool": [],
        "​Description": [
            "This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database."
        ],
        "​Installation": [
            "To install thecrewai_toolspackage and utilize the MySQLSearchTool, execute the following command in your terminal:"
        ],
        "​Example": [
            "Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:"
        ],
        "​Arguments": [
            "The MySQLSearchTool requires the following arguments for its operation:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool#nl2sqltool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool#requirements": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool#usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/nl2sqltool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "NL2SQL Tool": [],
        "​NL2SQLTool": [],
        "​Description": [
            "This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.",
            "This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.",
            "Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database."
        ],
        "​Requirements": [],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the formatdialect+driver://username:password@host:port/database."
        ],
        "​Example": [
            "The primary task goal was:",
            "“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”",
            "So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.",
            "",
            "The second task goal was:",
            "“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”",
            "Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.",
            "",
            "",
            "This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.",
            "The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database."
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool#pdfsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pdfsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PDF RAG Search": [],
        "​PDFSearchTool": [],
        "​Description": [
            "The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly."
        ],
        "​Installation": [
            "To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:"
        ],
        "​Example": [
            "Here’s how to use the PDFSearchTool to search within a PDF document:"
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool#pgsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool#example-usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/pgsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "PG RAG Search": [],
        "​PGSearchTool": [],
        "​Description": [
            "The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment."
        ],
        "​Installation": [
            "Thecrewai_toolspackage, which will include the PGSearchTool upon its release, can be installed using the following command:"
        ],
        "​Example Usage": [
            "Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:"
        ],
        "​Arguments": [
            "The PGSearchTool is designed to require the following arguments for its operation:"
        ],
        "​Custom Model and Embeddings": [
            "The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/scrapewebsitetool#scrapewebsitetool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Scrape Website": [],
        "​ScrapeWebsiteTool": [],
        "​Description": [
            "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/scrapewebsitetool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Scrape Website": [],
        "​ScrapeWebsiteTool": [],
        "​Description": [
            "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/scrapewebsitetool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Scrape Website": [],
        "​ScrapeWebsiteTool": [],
        "​Description": [
            "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/scrapewebsitetool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Scrape Website": [],
        "​ScrapeWebsiteTool": [],
        "​Description": [
            "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/scrapewebsitetool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Scrape Website": [],
        "​ScrapeWebsiteTool": [],
        "​Description": [
            "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Example": [],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/seleniumscrapingtool#seleniumscrapingtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Selenium Scraper": [],
        "​SeleniumScrapingTool": [],
        "​Description": [
            "The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL."
        ],
        "​Installation": [
            "To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:"
        ],
        "​Usage Examples": [
            "Below are some scenarios where the SeleniumScrapingTool can be utilized:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize the SeleniumScrapingTool’s scraping process:"
        ]
    },
    "https://docs.crewai.com/tools/seleniumscrapingtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Selenium Scraper": [],
        "​SeleniumScrapingTool": [],
        "​Description": [
            "The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL."
        ],
        "​Installation": [
            "To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:"
        ],
        "​Usage Examples": [
            "Below are some scenarios where the SeleniumScrapingTool can be utilized:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize the SeleniumScrapingTool’s scraping process:"
        ]
    },
    "https://docs.crewai.com/tools/seleniumscrapingtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Selenium Scraper": [],
        "​SeleniumScrapingTool": [],
        "​Description": [
            "The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL."
        ],
        "​Installation": [
            "To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:"
        ],
        "​Usage Examples": [
            "Below are some scenarios where the SeleniumScrapingTool can be utilized:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize the SeleniumScrapingTool’s scraping process:"
        ]
    },
    "https://docs.crewai.com/tools/seleniumscrapingtool#usage-examples": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Selenium Scraper": [],
        "​SeleniumScrapingTool": [],
        "​Description": [
            "The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL."
        ],
        "​Installation": [
            "To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:"
        ],
        "​Usage Examples": [
            "Below are some scenarios where the SeleniumScrapingTool can be utilized:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize the SeleniumScrapingTool’s scraping process:"
        ]
    },
    "https://docs.crewai.com/tools/seleniumscrapingtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Selenium Scraper": [],
        "​SeleniumScrapingTool": [],
        "​Description": [
            "The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL."
        ],
        "​Installation": [
            "To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:"
        ],
        "​Usage Examples": [
            "Below are some scenarios where the SeleniumScrapingTool can be utilized:"
        ],
        "​Arguments": [
            "The following parameters can be used to customize the SeleniumScrapingTool’s scraping process:"
        ]
    },
    "https://docs.crewai.com/tools/spidertool#spidertool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Spider Scraper": [],
        "​SpiderTool": [],
        "​Description": [
            "Spideris thefastestopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI."
        ],
        "​Installation": [
            "To use theSpiderToolyou need to download theSpider SDKand thecrewai[tools]SDK too:"
        ],
        "​Example": [
            "This example shows you how you can use theSpiderToolto enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there."
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/spidertool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Spider Scraper": [],
        "​SpiderTool": [],
        "​Description": [
            "Spideris thefastestopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI."
        ],
        "​Installation": [
            "To use theSpiderToolyou need to download theSpider SDKand thecrewai[tools]SDK too:"
        ],
        "​Example": [
            "This example shows you how you can use theSpiderToolto enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there."
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/spidertool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Spider Scraper": [],
        "​SpiderTool": [],
        "​Description": [
            "Spideris thefastestopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI."
        ],
        "​Installation": [
            "To use theSpiderToolyou need to download theSpider SDKand thecrewai[tools]SDK too:"
        ],
        "​Example": [
            "This example shows you how you can use theSpiderToolto enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there."
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/spidertool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Spider Scraper": [],
        "​SpiderTool": [],
        "​Description": [
            "Spideris thefastestopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI."
        ],
        "​Installation": [
            "To use theSpiderToolyou need to download theSpider SDKand thecrewai[tools]SDK too:"
        ],
        "​Example": [
            "This example shows you how you can use theSpiderToolto enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there."
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/spidertool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Spider Scraper": [],
        "​SpiderTool": [],
        "​Description": [
            "Spideris thefastestopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI."
        ],
        "​Installation": [
            "To use theSpiderToolyou need to download theSpider SDKand thecrewai[tools]SDK too:"
        ],
        "​Example": [
            "This example shows you how you can use theSpiderToolto enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there."
        ],
        "​Arguments": []
    },
    "https://docs.crewai.com/tools/txtsearchtool#txtsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/txtsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/txtsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/txtsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/txtsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/txtsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "TXT RAG Search": [],
        "​TXTSearchTool": [],
        "​Description": [
            "This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided."
        ],
        "​Installation": [
            "To use theTXTSearchTool, you first need to install thecrewai_toolspackage.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:",
            "This command will download and install the TXTSearchTool along with any necessary dependencies."
        ],
        "​Example": [
            "The following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/visiontool#visiontool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Vision Tool": [],
        "​VisionTool": [],
        "​Description": [
            "This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the VisionTool, the OpenAI API key should be set in the environment variableOPENAI_API_KEY."
        ],
        "​Arguments": [
            "The VisionTool requires the following arguments:"
        ]
    },
    "https://docs.crewai.com/tools/visiontool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Vision Tool": [],
        "​VisionTool": [],
        "​Description": [
            "This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the VisionTool, the OpenAI API key should be set in the environment variableOPENAI_API_KEY."
        ],
        "​Arguments": [
            "The VisionTool requires the following arguments:"
        ]
    },
    "https://docs.crewai.com/tools/visiontool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Vision Tool": [],
        "​VisionTool": [],
        "​Description": [
            "This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the VisionTool, the OpenAI API key should be set in the environment variableOPENAI_API_KEY."
        ],
        "​Arguments": [
            "The VisionTool requires the following arguments:"
        ]
    },
    "https://docs.crewai.com/tools/visiontool#usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Vision Tool": [],
        "​VisionTool": [],
        "​Description": [
            "This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the VisionTool, the OpenAI API key should be set in the environment variableOPENAI_API_KEY."
        ],
        "​Arguments": [
            "The VisionTool requires the following arguments:"
        ]
    },
    "https://docs.crewai.com/tools/visiontool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Vision Tool": [],
        "​VisionTool": [],
        "​Description": [
            "This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent."
        ],
        "​Installation": [
            "Install the crewai_tools package"
        ],
        "​Usage": [
            "In order to use the VisionTool, the OpenAI API key should be set in the environment variableOPENAI_API_KEY."
        ],
        "​Arguments": [
            "The VisionTool requires the following arguments:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool#websitesearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool#example-usage": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/websitesearchtool#customization-options": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Website RAG Search": [],
        "​WebsiteSearchTool": [],
        "​Description": [
            "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible."
        ],
        "​Installation": [
            "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
            "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately."
        ],
        "​Example Usage": [
            "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:"
        ],
        "​Arguments": [],
        "​Customization Options": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool#xmlsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/xmlsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "XML RAG Search": [],
        "​XMLSearchTool": [],
        "​Description": [
            "The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes."
        ],
        "​Installation": [
            "To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:"
        ],
        "​Example": [
            "Here are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool#youtubechannelsearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubechannelsearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Channel RAG Search": [],
        "​YoutubeChannelSearchTool": [],
        "​Description": [
            "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics."
        ],
        "​Installation": [
            "To utilize the YoutubeChannelSearchTool, thecrewai_toolspackage must be installed. Execute the following command in your shell to install:"
        ],
        "​Example": [
            "To begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content."
        ],
        "​Arguments": [],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool#youtubevideosearchtool": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool#description": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool#installation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool#example": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool#arguments": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/tools/youtubevideosearchtool#custom-model-and-embeddings": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "YouTube Video RAG Search": [],
        "​YoutubeVideoSearchTool": [],
        "​Description": [
            "This tool is part of thecrewai_toolspackage and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL."
        ],
        "​Installation": [
            "To utilize theYoutubeVideoSearchTool, you must first install thecrewai_toolspackage.\nThis package contains theYoutubeVideoSearchToolamong other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:"
        ],
        "​Example": [
            "To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content."
        ],
        "​Arguments": [
            "The YoutubeVideoSearchTool accepts the following initialization arguments:"
        ],
        "​Custom model and embeddings": [
            "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:"
        ]
    },
    "https://docs.crewai.com/telemetry#telemetry": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Telemetry": [
            "CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.\nOur focus is on improving and developing the features, integrations, and tools most utilized by our users.",
            "It’s pivotal to understand that by default,NO personal data is collectedconcerning prompts, task descriptions, agents’ backstories or goals,\nusage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.\nWhen theshare_crewfeature is enabled, detailed data including task descriptions, agents’ backstories or goals, and other specific attributes are collected\nto provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before enablingshare_crew.\nUsers can disable telemetry by setting the environment variableOTEL_SDK_DISABLEDtotrue."
        ],
        "​Data Explanation:": [],
        "​Opt-In Further Telemetry Sharing": [
            "Users can choose to share their complete telemetry data by enabling theshare_crewattribute toTruein their crew configurations.\nEnablingshare_crewresults in the collection of detailed crew and task execution data, includinggoal,backstory,context, andoutputof tasks.\nThis enables a deeper insight into usage patterns."
        ]
    },
    "https://docs.crewai.com/telemetry#data-explanation": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Telemetry": [
            "CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.\nOur focus is on improving and developing the features, integrations, and tools most utilized by our users.",
            "It’s pivotal to understand that by default,NO personal data is collectedconcerning prompts, task descriptions, agents’ backstories or goals,\nusage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.\nWhen theshare_crewfeature is enabled, detailed data including task descriptions, agents’ backstories or goals, and other specific attributes are collected\nto provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before enablingshare_crew.\nUsers can disable telemetry by setting the environment variableOTEL_SDK_DISABLEDtotrue."
        ],
        "​Data Explanation:": [],
        "​Opt-In Further Telemetry Sharing": [
            "Users can choose to share their complete telemetry data by enabling theshare_crewattribute toTruein their crew configurations.\nEnablingshare_crewresults in the collection of detailed crew and task execution data, includinggoal,backstory,context, andoutputof tasks.\nThis enables a deeper insight into usage patterns."
        ]
    },
    "https://docs.crewai.com/telemetry#opt-in-further-telemetry-sharing": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "​Telemetry": [
            "CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.\nOur focus is on improving and developing the features, integrations, and tools most utilized by our users.",
            "It’s pivotal to understand that by default,NO personal data is collectedconcerning prompts, task descriptions, agents’ backstories or goals,\nusage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.\nWhen theshare_crewfeature is enabled, detailed data including task descriptions, agents’ backstories or goals, and other specific attributes are collected\nto provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before enablingshare_crew.\nUsers can disable telemetry by setting the environment variableOTEL_SDK_DISABLEDtotrue."
        ],
        "​Data Explanation:": [],
        "​Opt-In Further Telemetry Sharing": [
            "Users can choose to share their complete telemetry data by enabling theshare_crewattribute toTruein their crew configurations.\nEnablingshare_crewresults in the collection of detailed crew and task execution data, includinggoal,backstory,context, andoutputof tasks.\nThis enables a deeper insight into usage patterns."
        ]
    },
    "https://docs.crewai.com/concepts#what-is-an-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts#agent-attributes": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts#creating-an-agent": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts#setting-prompt-templates": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts#bring-your-third-party-agents": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    },
    "https://docs.crewai.com/concepts#conclusion": {
        "Get Started": [],
        "Core Concepts": [],
        "How to Guides": [],
        "Tools": [],
        "Telemetry": [],
        "Agents": [],
        "​What is an agent?": [
            "An agent is anautonomous unitprogrammed to:"
        ],
        "​Agent attributes": [],
        "​Creating an agent": [
            "To create an agent, you would typically initialize an instance of theAgentclass with the desired properties. Here’s a conceptual example including all attributes:"
        ],
        "​Setting prompt templates": [
            "Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:"
        ],
        "​Bring your third-party agents": [
            "Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’sBaseAgentclass.",
            "CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems."
        ],
        "​Conclusion": [
            "Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. Thecode_execution_modeattribute provides flexibility in how agents execute code, allowing for both secure and direct execution options."
        ]
    }
}